// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlServiceClient is the client API for UrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlServiceClient interface {
	Add(ctx context.Context, in *Url, opts ...grpc.CallOption) (*VoidResponse, error)
	Delete(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*VoidResponse, error)
	Get(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*Url, error)
	GetCounter(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*Counter, error)
}

type urlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlServiceClient(cc grpc.ClientConnInterface) UrlServiceClient {
	return &urlServiceClient{cc}
}

func (c *urlServiceClient) Add(ctx context.Context, in *Url, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/protocol.UrlService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) Delete(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/protocol.UrlService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) Get(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/protocol.UrlService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) GetCounter(ctx context.Context, in *UrlId, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/protocol.UrlService/GetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlServiceServer is the server API for UrlService service.
// All implementations must embed UnimplementedUrlServiceServer
// for forward compatibility
type UrlServiceServer interface {
	Add(context.Context, *Url) (*VoidResponse, error)
	Delete(context.Context, *UrlId) (*VoidResponse, error)
	Get(context.Context, *UrlId) (*Url, error)
	GetCounter(context.Context, *UrlId) (*Counter, error)
	mustEmbedUnimplementedUrlServiceServer()
}

// UnimplementedUrlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlServiceServer struct {
}

func (UnimplementedUrlServiceServer) Add(context.Context, *Url) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUrlServiceServer) Delete(context.Context, *UrlId) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUrlServiceServer) Get(context.Context, *UrlId) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUrlServiceServer) GetCounter(context.Context, *UrlId) (*Counter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounter not implemented")
}
func (UnimplementedUrlServiceServer) mustEmbedUnimplementedUrlServiceServer() {}

// UnsafeUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlServiceServer will
// result in compilation errors.
type UnsafeUrlServiceServer interface {
	mustEmbedUnimplementedUrlServiceServer()
}

func RegisterUrlServiceServer(s grpc.ServiceRegistrar, srv UrlServiceServer) {
	s.RegisterService(&UrlService_ServiceDesc, srv)
}

func _UrlService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UrlService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).Add(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UrlService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).Delete(ctx, req.(*UrlId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UrlService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).Get(ctx, req.(*UrlId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_GetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).GetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UrlService/GetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).GetCounter(ctx, req.(*UrlId))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlService_ServiceDesc is the grpc.ServiceDesc for UrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.UrlService",
	HandlerType: (*UrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UrlService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UrlService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UrlService_Get_Handler,
		},
		{
			MethodName: "GetCounter",
			Handler:    _UrlService_GetCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interfaceAdapters/grpc/protocol/url-service.proto",
}
